// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./generated/zod"
  useMultipleFiles          = true
  createInputTypes          = false
  relationModel             = true
  createRelationValuesTypes = true
  modelCase                 = "camelCase"
  modelSuffix               = "Schema"
  useDecimalJs              = true
  prismaJsonNullability     = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id
  email                    String    @unique
  profileUrl               String?
  hashedPassword           String
  resetPasswordToken       String?   @unique
  resetPasswordTokenExpiry DateTime?
  username                 String
  department               String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  sessions                 Session[]
  role                     RoleType  @default(USER)
  setting                  Setting?
  request                  Request[]
}

model Department {
  id        String   @id
  label     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model File {
  id           String      @id
  url          String
  blurDataUrl  String?
  JobRequest   JobRequest? @relation(fields: [jobRequestId], references: [id])
  jobRequestId String?
}

model Setting {
  id        String   @id
  userId    String   @unique
  fontSize  String   @default("default")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id                String             @id
  approvedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  priority          PriorityType
  type              RequestType
  title             String
  status            RequestStatusType  @default(PENDING)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  department        String
  jobRequest        JobRequest?
  venueRequest      VenueRequest?
  ReturnableRequest ReturnableRequest?
  ConsumableRequest ConsumableRequest?
  transportRequest  TransportRequest?
}

model ItemCategory {
  id        String   @id
  name      String
  label     String
  createdAt DateTime @default(now())
}

model JobRequest {
  id        String   @id
  notes     String
  dueDate   DateTime
  jobType   String
  assignTo  String
  files     File[]
  requestId String   @unique
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model VenueRequest {
  id                String   @id
  notes             String?
  purpose           String
  setupRequirements String
  startTime         DateTime
  endTime           DateTime
  requestId         String   @unique
  request           Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  venueId           String
  venue             Venue    @relation(fields: [venueId], references: [id])
}

model Venue {
  id        String         @id
  name      String
  location  String
  capacity  Int
  imageUrl  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    VenueStatus    @default(AVAILABLE)
  requests  VenueRequest[]
}

model ReturnableRequest {
  id         String           @id
  items      ReturnableItem[]
  quantity   Int
  dateNeeded DateTime
  returnDate DateTime
  purpose    String?
  status     RequestStatus    @default(PENDING)
  requestId  String           @unique
  request    Request          @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model ConsumableRequest {
  id         String           @id
  items      ConsumableItem[]
  quantity   Int
  dateNeeded DateTime
  purpose    String?
  status     RequestStatus    @default(PENDING)
  requestId  String           @unique
  request    Request          @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model ReturnableItem {
  id                  String               @id
  name                String
  description         String?
  status              ReturnableItemStatus @default(AVAILABLE)
  imageUrl            String?
  serialNumber        String?              @unique
  lastMaintenance     DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  returnableRequest   ReturnableRequest?   @relation(fields: [returnableRequestId], references: [id])
  returnableRequestId String?
}

model ConsumableItem {
  id                  String               @id
  name                String
  description         String?
  status              ConsumableItemStatus @default(IN_STOCK)
  imageUrl            String?
  quantity            Int
  unit                String
  lowStockThreshold   Int
  expirationDate      DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  consumableRequest   ConsumableRequest?   @relation(fields: [consumableRequestId], references: [id])
  consumableRequestId String?
}

model TransportRequest {
  id                String   @id
  description       String
  destination       String
  dateAndTimeNeeded DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  requestId         String   @unique
  request           Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  vehicleId         String
  vehicle           Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Vehicle {
  id                String              @id
  name              String
  type              String
  imageUrl          String
  capacity          Int
  licensePlate      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            VehicleStatus       @default(AVAILABLE)
  TransportRequest  TransportRequest[]
  MaintenanceRecord MaintenanceRecord[]
}

model MaintenanceRecord {
  id        String   @id
  date      DateTime
  details   String
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

enum ReturnableItemStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  LOST
  RETURNED
  PENDING_RETURN
}

enum ConsumableItemStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  ORDERED
  EXPIRED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  FULFILLED
  RETURNED
  PARTIALLY_FULFILLED
}

enum VenueStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  RESERVED
  CLOSED
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  RESERVED
}

enum RequestType {
  JOB
  RESOURCE
  VENUE
  TRANSPORT
}

enum RoleType {
  USER
  REQUEST_MANAGER
  ADMIN
}

enum PriorityType {
  NO_PRIORITY
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatusType {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}
