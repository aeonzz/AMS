// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma-types"
  output                = "./generated/zod"
  useMultipleFiles      = true
  createInputTypes      = false
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id
  email                    String    @unique
  profileUrl               String?
  hashedPassword           String
  resetPasswordToken       String?   @unique
  resetPasswordTokenExpiry DateTime?
  username                 String
  sessions                 Session[]
  role                     RoleType  @default(USER)
  setting                  Setting?
  request                  Request[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model File {
  id          String  @id
  url         String
  blurDataUrl String?
}

model Setting {
  id        String   @id
  userId    String   @unique
  fontSize  String   @default("default")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id              String            @id
  approvedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  priority        PriorityType
  type            String
  notes           String
  status          RequestStatusType @default(PENDING)
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  department      String
  jobRequest      JobRequest?
  venueRequest    VenueRequest?
  resourceRequest ResourceRequest?
}

model ItemCategory {
  id        String   @id
  name      String
  label     String
  createdAt DateTime @default(now())
}

model RepItem {
  id               String      @id
  name             String
  itemCategory     String
  brand            String?
  model            String?
  serialNumber     String?
  issueDescription String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  jobRequest       JobRequest?
}

model JobRequest {
  id          String  @id
  requestId   String  @unique
  request     Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  jobType     String
  description String?
  repItem     RepItem @relation(fields: [repItemId], references: [id])
  repItemId   String  @unique
}

model VenueRequest {
  id        String   @id
  requestId String   @unique
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  venueName String
  startTime DateTime
  endTime   DateTime
}

model ResourceRequest {
  id         String   @id
  requestId  String   @unique
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  itemType   String
  quantity   Int
  returnDate DateTime
}

enum RequestType {
  JOB
  RESOURCE
  VENUE
}

enum RoleType {
  USER
  ADMIN
  SYSTEMADMIN
}

enum PriorityType {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatusType {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
  DELAYED
  UNDER_REVIEW
  SCHEDULED
}
