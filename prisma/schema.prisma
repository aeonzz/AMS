// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./generated/zod"
  useMultipleFiles          = true
  createInputTypes          = false
  relationModel             = true
  createRelationValuesTypes = true
  modelCase                 = "camelCase"
  modelSuffix               = "Schema"
  useDecimalJs              = true
  prismaJsonNullability     = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id
  email                    String               @unique
  profileUrl               String?
  hashedPassword           String
  resetPasswordToken       String?              @unique
  resetPasswordTokenExpiry DateTime?
  firstName                String
  middleName               String?
  lastName                 String
  isArchived               Boolean              @default(false)
  departmentId             String?
  department               Department?         @relation(fields: [departmentId], references: [id])
  createdAt                DateTime             @default(now())
  sectionId                String?
  section                  Section?             @relation(fields: [sectionId], references: [id])
  updatedAt                DateTime             @updatedAt
  sessions                 Session[]
  setting                  Setting?
  request                  Request[]
  userRole                 UserRole[]
  jobRequestsAsReviewer    JobRequest[]         @relation(name: "ReviewerRelation")
  jobRequestsAsAssigned    JobRequest[]         @relation(name: "AssignedUserRelation")
  JobRequestAuditLog       JobRequestAuditLog[]
}

model UserRole {
  id           String     @id
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, roleId, departmentId])
}

model Role {
  id          String     @id
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isArchived  Boolean    @default(false)
  userRoles   UserRole[]
}

model Department {
  id                String              @id
  label             String
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UserRole          UserRole[]
  inventoryItem     InventoryItem[]
  ReturnableRequest ReturnableRequest[]
  user              User[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model File {
  id           String      @id
  url          String
  blurDataUrl  String?
  JobRequest   JobRequest? @relation(fields: [jobRequestId], references: [id])
  jobRequestId String?
}

model Setting {
  id        String   @id
  userId    String   @unique
  fontSize  String   @default("default")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id                String             @id
  approvedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  priority          PriorityType
  type              RequestType
  title             String
  status            RequestStatusType  @default(PENDING)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  department        String
  jobRequest        JobRequest?
  venueRequest      VenueRequest?
  returnableRequest ReturnableRequest?
  supplyRequest     SupplyRequest?
  transportRequest  TransportRequest?
}

model JobRequest {
  id                 String               @id
  description        String
  dueDate            DateTime
  estimatedTime      Int?
  startDate          DateTime?
  endDate            DateTime?
  costEstimate       Float?
  actualCost         Float?
  jobType            JobType
  files              File[]
  progressNotes      String?
  requestId          String               @unique
  request            Request              @relation(fields: [requestId], references: [id], onDelete: Cascade)
  section            Section              @relation(fields: [sectionId], references: [id])
  sectionId          String
  status             JobStatus            @default(PENDING)
  reviewedBy         String?
  reviewer           User?                @relation(name: "ReviewerRelation", fields: [reviewedBy], references: [id])
  assignedTo         String?
  assignedUser       User?                @relation(name: "AssignedUserRelation", fields: [assignedTo], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  jobRequestAuditLog JobRequestAuditLog[]
}

model JobRequestAuditLog {
  id           String     @id
  jobRequestId String
  jobRequest   JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  changeType   ChangeType
  oldValue     Json?
  newValue     Json?
  changedById  String
  changedBy    User       @relation(fields: [changedById], references: [id])
  timestamp    DateTime   @default(now())
}

model Section {
  id          String       @id
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isArchived  Boolean      @default(false)
  jobRequests JobRequest[]
  User        User[]
}

model VenueRequest {
  id                String   @id
  notes             String?
  purpose           String
  setupRequirements String
  startTime         DateTime
  endTime           DateTime
  requestId         String   @unique
  request           Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  venueId           String
  venue             Venue    @relation(fields: [venueId], references: [id])
}

model Venue {
  id        String         @id
  name      String
  location  String
  capacity  Int
  imageUrl  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    VenueStatus    @default(AVAILABLE)
  requests  VenueRequest[]
}

model ReturnableRequest {
  id                String           @id
  itemId            String
  item              InventorySubItem @relation(fields: [itemId], references: [id])
  dateAndTimeNeeded DateTime
  returnDateAndTime DateTime
  purpose           String
  quantity          Int              @default(1)
  requestId         String           @unique
  request           Request          @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  departmentId      String
  department        Department       @relation(fields: [departmentId], references: [id])
}

model InventorySubItem {
  id                String              @id
  inventoryId       String
  subName           String
  serialNumber      String?
  inventory         InventoryItem       @relation(fields: [inventoryId], references: [id])
  status            ItemStatus          @default(AVAILABLE)
  isArchived        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  returnableRequest ReturnableRequest[]
}

model InventoryItem {
  id                String             @id
  name              String
  description       String
  imageUrl          String
  inventorySubItems InventorySubItem[]
  isArchived        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  departmentId      String
  department        Department         @relation(fields: [departmentId], references: [id])
}

model SupplyRequest {
  id                String              @id
  dateAndTimeNeeded DateTime
  purpose           String
  requestId         String              @unique
  request           Request             @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  items             SupplyRequestItem[]
}

model SupplyItem {
  id                 String              @id
  name               String
  description        String?
  status             SupplyItemStatus    @default(IN_STOCK)
  imageUrl           String
  quantity           Int
  unit               String
  lowStockThreshold  Int
  expirationDate     DateTime?
  category           SupplyItemCategory
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  supplyRequestItems SupplyRequestItem[]
}

model SupplyRequestItem {
  id              String        @id
  supplyRequestId String
  supplyItemId    String
  quantity        Int
  supplyRequest   SupplyRequest @relation(fields: [supplyRequestId], references: [id], onDelete: Cascade)
  supplyItem      SupplyItem    @relation(fields: [supplyItemId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([supplyRequestId, supplyItemId])
}

model TransportRequest {
  id                String   @id
  description       String
  destination       String
  dateAndTimeNeeded DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  requestId         String   @unique
  request           Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  vehicleId         String
  vehicle           Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Vehicle {
  id                String              @id
  name              String
  type              String
  imageUrl          String
  capacity          Int
  licensePlate      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            VehicleStatus       @default(AVAILABLE)
  TransportRequest  TransportRequest[]
  MaintenanceRecord MaintenanceRecord[]
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ChangeType {
  STATUS_CHANGE
  FIELD_UPDATE
  ASSIGNMENT_CHANGE
  REVIEWER_CHANGE
  APPROVER_CHANGE
  APPROVED
  CANCELLED
  CREATED
  OTHER
}

enum JobType {
  ROUTINE_MAINTENANCE
  REPAIRS
  INSTALLATION
  INSPECTION
  EMERGENCY_REPAIR
  UPGRADES_RENOVATIONS
  PREVENTIVE_MAINTENANCE
  CALIBRATION_TESTING
  CLEANING_JANITORIAL
  EVENT_SETUP_SUPPORT
  SAFETY_COMPLIANCE_CHECKS
  FURNITURE_ASSEMBLY_MOVING
  PAINTING_SURFACE_TREATMENT
  LANDSCAPING_GROUNDS_MAINTENANCE
  IT_SUPPORT_TROUBLESHOOTING
  SECURITY_SYSTEMS_MAINTENANCE
  WASTE_MANAGEMENT_RECYCLING
  TRANSPORT_VEHICLE_MAINTENANCE
  SPECIAL_PROJECTS
  RESOURCE_SETUP_BREAKDOWN
}

model MaintenanceRecord {
  id        String   @id
  date      DateTime
  details   String
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

enum ItemStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  LOST
  RETURNED
  PENDING_RETURN
}

enum SupplyItemCategory {
  OFFICE_SUPPLIES
  ELECTRONICS
  FURNITURE
  CLEANING
  MEDICAL
  EDUCATIONAL
  OTHER
}

enum SupplyItemStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  ORDERED
  EXPIRED
}

enum VenueStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  RESERVED
  CLOSED
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  RESERVED
}

enum RequestType {
  JOB
  RESOURCE
  VENUE
  TRANSPORT
}

enum PriorityType {
  NO_PRIORITY
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatusType {
  PENDING
  APPROVED
  IN_PROGRESS
  UNDER_REVIEW
  REVIEWED
  COMPLETED
  REJECTED
  CANCELLED
}
